services:
  # DATABASES

  employee-mysql:
    image: mysql:8.0
    container_name: employee-db
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=pwd
      - MYSQL_DATABASE=employee-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/employee-mysql:/var/lib/employee-mysql
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-uuser",
          "-ppwd",
          "-h",
          "localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  author-mysql:
    image: mysql:8.0
    container_name: author-db
    ports:
      - "3308:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=pwd
      - MYSQL_DATABASE=author-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    volumes:
      - ./data/author-mysql:/var/lib/author-mysql
      - ./data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-uuser",
          "-ppwd",
          "-h",
          "localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  membership-postgres:
    image: postgres:latest
    hostname: membership-postgres
    container_name: membership-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=membership-db
      - PGUSER=membership-db
      - POSTGRES_PASSWORD=pwd
    volumes:
      - ./data/membership-postgres:/var/lib/postgresql
      - ./membership-service/data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: "pg_isready -h membership-postgres"
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-postgres:
    image: postgres:latest
    hostname: inventory-postgres
    container_name: inventory-postgres
    ports:
      - "5431:5432"
    environment:
      - POSTGRES_USER=inventory-db
      - PGUSER=inventory-db
      - POSTGRES_PASSWORD=pwd
    volumes:
      - ./data/inventory-postgres:/var/lib/postgresql
      - ./book-service/data/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      #      test: ["CMD", "mysqladmin", "ping", "-uuser", "-ppwd", "-h", "localhost"]
      test: "pg_isready -h inventory-postgres"
      interval: 10s
      timeout: 5s
      retries: 5

  transaction-mongodb:
    image: mongo:5.0
    container_name: transaction-mongodb
    hostname: transaction-mongodb
    ports:
      - 27017:27017
    volumes:
      - mongo:/data

    environment:
      - MONGO_INITDB_DATABASE=transaction-mongodb
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pwd
      - MONGO_INITDB_DATABASE=transactions
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')", "--username", "user", "--password", "pwd", "--authenticationDatabase", "admin" ]
      interval: 10s
      timeout: 5s
      retries: 10

  # DATABASE TOOLS

  mongo-express:
    image: mongo-express
    container_name: mongo_express
    restart: always
    ports:
      - 8086:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: transaction-mongodb
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: user
      ME_CONFIG_MONGODB_ADMINPASSWORD: pwd
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - transaction-mongodb

  phpmyadmin:
    image: phpmyadmin:5.2.0
    container_name: PhpMyAdmin
    links:
      - author-mysql
      - employee-mysql
    restart: always
    ports:
      - "5013:80"
    environment:
      - PMA_ARBITRARY=1
    depends_on:
      - author-mysql
      - employee-mysql

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: PostgresAdmin
    restart: always
    ports:
      - "9000:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=8Y2o6@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - membership-postgres
      - inventory-postgres

  # API GATEWAY

  api-gateway:
    build:
      context: api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    restart: always
    depends_on:
      - author-service
      - membership-service
      - employee-service
      - inventory-service
      - transaction-service
    privileged: true

  # SERVICES

  membership-service:
    build:
      context: membership-service
      dockerfile: Dockerfile
    container_name: membership-service
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/app/logs
    restart: always
    depends_on:
      membership-postgres:
        condition: service_healthy
    privileged: true

  author-service:
    build:
      context: author-service
      dockerfile: Dockerfile
    container_name: author-service
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/app/logs
    restart: always
    depends_on:
      author-mysql:
        condition: service_healthy
    privileged: true

  employee-service:
    build:
      context: employee-service
      dockerfile: Dockerfile
    container_name: employee-service
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/app/logs
    restart: always
    depends_on:
      employee-mysql:
        condition: service_healthy
    privileged: true

  inventory-service:
    build:
      context: inventory-service
      dockerfile: Dockerfile
    hostname: inventory-service
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/app/logs
    restart: always
    depends_on:
      inventory-postgres:
        condition: service_healthy
    privileged: true

  transaction-service:
    build:
      context: transaction-service
      dockerfile: Dockerfile
    hostname: transaction-service
    ports:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - logs:/app/logs
    restart: always
    depends_on:
      transaction-mongodb:
        condition: service_healthy
    privileged: true

volumes:
  logs: {}
  mongo: {}